// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "openlist:plugin-driver/types@0.1.0".
//
// 定义插件生态系统中所有通用的数据结构。
package types

import (
	monotonicclock "github.com/OpenListTeam/openlist-wasi-plugin-driver/binding/wasi/clocks/monotonic-clock"
	"github.com/OpenListTeam/openlist-wasi-plugin-driver/binding/wasi/http/types"
	"github.com/OpenListTeam/openlist-wasi-plugin-driver/binding/wasi/io/poll"
	"github.com/OpenListTeam/openlist-wasi-plugin-driver/binding/wasi/io/streams"
	"go.bytecodealliance.org/cm"
)

// Duration represents the type alias "openlist:plugin-driver/types@0.1.0#duration".
//
// See [monotonicclock.Duration] for more information.
type Duration = monotonicclock.Duration

// InputStream represents the imported type alias "openlist:plugin-driver/types@0.1.0#input-stream".
//
// See [streams.InputStream] for more information.
type InputStream = streams.InputStream

// OutputStream represents the imported type alias "openlist:plugin-driver/types@0.1.0#output-stream".
//
// See [streams.OutputStream] for more information.
type OutputStream = streams.OutputStream

// Pollable represents the imported type alias "openlist:plugin-driver/types@0.1.0#pollable".
//
// See [poll.Pollable] for more information.
type Pollable = poll.Pollable

// Headers represents the imported type alias "openlist:plugin-driver/types@0.1.0#headers".
//
// See [types.Headers] for more information.
type Headers = types.Headers

// DriverErrors represents the variant "openlist:plugin-driver/types@0.1.0#driver-errors".
//
//	variant driver-errors {
//		invalid-handle,
//		not-implemented,
//		not-support,
//		not-found,
//		not-folder,
//		not-file,
//		generic(string),
//		unauthorized(string),
//	}
type DriverErrors cm.Variant[uint8, string, string]

// DriverErrorsInvalidHandle returns a [DriverErrors] of case "invalid-handle".
//
// drivre 资源无效
func DriverErrorsInvalidHandle() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](0, data)
}

// InvalidHandle returns true if [DriverErrors] represents the variant case "invalid-handle".
func (self *DriverErrors) InvalidHandle() bool {
	return self.Tag() == 0
}

// DriverErrorsNotImplemented returns a [DriverErrors] of case "not-implemented".
//
// 表示功能未实现。
func DriverErrorsNotImplemented() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](1, data)
}

// NotImplemented returns true if [DriverErrors] represents the variant case "not-implemented".
func (self *DriverErrors) NotImplemented() bool {
	return self.Tag() == 1
}

// DriverErrorsNotSupport returns a [DriverErrors] of case "not-support".
//
// 表示功能不支持
func DriverErrorsNotSupport() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](2, data)
}

// NotSupport returns true if [DriverErrors] represents the variant case "not-support".
func (self *DriverErrors) NotSupport() bool {
	return self.Tag() == 2
}

// DriverErrorsNotFound returns a [DriverErrors] of case "not-found".
//
// 表示资源未找到。
func DriverErrorsNotFound() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](3, data)
}

// NotFound returns true if [DriverErrors] represents the variant case "not-found".
func (self *DriverErrors) NotFound() bool {
	return self.Tag() == 3
}

// DriverErrorsNotFolder returns a [DriverErrors] of case "not-folder".
//
// 表示路径是文件而非目录。
func DriverErrorsNotFolder() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](4, data)
}

// NotFolder returns true if [DriverErrors] represents the variant case "not-folder".
func (self *DriverErrors) NotFolder() bool {
	return self.Tag() == 4
}

// DriverErrorsNotFile returns a [DriverErrors] of case "not-file".
//
// 表示路径是目录而非文件。
func DriverErrorsNotFile() DriverErrors {
	var data struct{}
	return cm.New[DriverErrors](5, data)
}

// NotFile returns true if [DriverErrors] represents the variant case "not-file".
func (self *DriverErrors) NotFile() bool {
	return self.Tag() == 5
}

// DriverErrorsGeneric returns a [DriverErrors] of case "generic".
//
// 包含描述信息的通用错误。
func DriverErrorsGeneric(data string) DriverErrors {
	return cm.New[DriverErrors](6, data)
}

// Generic returns a non-nil *[string] if [DriverErrors] represents the variant case "generic".
func (self *DriverErrors) Generic() *string {
	return cm.Case[string](self, 6)
}

// DriverErrorsUnauthorized returns a [DriverErrors] of case "unauthorized".
//
// 授权失效，此时驱动处于无法自动恢复的状态
func DriverErrorsUnauthorized(data string) DriverErrors {
	return cm.New[DriverErrors](7, data)
}

// Unauthorized returns a non-nil *[string] if [DriverErrors] represents the variant case "unauthorized".
func (self *DriverErrors) Unauthorized() *string {
	return cm.Case[string](self, 7)
}

var _DriverErrorsStrings = [8]string{
	"invalid-handle",
	"not-implemented",
	"not-support",
	"not-found",
	"not-folder",
	"not-file",
	"generic",
	"unauthorized",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v DriverErrors) String() string {
	return _DriverErrorsStrings[v.Tag()]
}

// Readable represents the imported resource "openlist:plugin-driver/types@0.1.0#readable".
//
// 代表宿主端可读文件的资源。
//
//	resource readable
type Readable cm.Resource

// ResourceDrop represents the imported resource-drop for resource "readable".
//
// Drops a resource handle.
//
//go:nosplit
func (self Readable) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ReadableResourceDrop((uint32)(self0))
	return
}

// GetHasher represents the imported method "get-hasher".
//
// 获取或计算文件的hash，会缓存整个文件
//
//	get-hasher: func(hashs: list<hash-alg>) -> result<list<hash-info>, string>
//
//go:nosplit
func (self Readable) GetHasher(hashs cm.List[HashAlg]) (result cm.Result[cm.List[HashInfo], cm.List[HashInfo], string]) {
	self0 := cm.Reinterpret[uint32](self)
	hashs0, hashs1 := cm.LowerList(hashs)
	wasmimport_ReadableGetHasher((uint32)(self0), (*HashAlg)(hashs0), (uint32)(hashs1), &result)
	return
}

// Peek represents the imported method "peek".
//
// 从文件的指定偏移量读取一块数据,并且不消耗流。
// 当读取总量超过内部设置大小后会缓存整个文件
// stream-peek只能存在一个实例，
// 与stream-range互斥，必须销毁后才能调用stream-range
//
//	peek: func(offset: u64, len: u64) -> result<input-stream, string>
//
//go:nosplit
func (self Readable) Peek(offset uint64, len_ uint64) (result cm.Result[string, InputStream, string]) {
	self0 := cm.Reinterpret[uint32](self)
	offset0 := (uint64)(offset)
	len0 := (uint64)(len_)
	wasmimport_ReadablePeek((uint32)(self0), (uint64)(offset0), (uint64)(len0), &result)
	return
}

// Range represents the imported method "range".
//
// 缓存整个文件
// stream-range 允许存在多个实例
// 为了减少复杂性，调用后stream-peek将永远返回错误
//
//	range: func(offset: u64, len: u64) -> result<input-stream, string>
//
//go:nosplit
func (self Readable) Range(offset uint64, len_ uint64) (result cm.Result[string, InputStream, string]) {
	self0 := cm.Reinterpret[uint32](self)
	offset0 := (uint64)(offset)
	len0 := (uint64)(len_)
	wasmimport_ReadableRange((uint32)(self0), (uint64)(offset0), (uint64)(len0), &result)
	return
}

// Streams represents the imported method "streams".
//
// 只允许调用一次，会消耗底层的reader导致stream-range无法调用
// 适合支持流上传，并且不需要预算hash的情况
//
//	streams: func() -> result<input-stream, string>
//
//go:nosplit
func (self Readable) Streams() (result cm.Result[string, InputStream, string]) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_ReadableStreams((uint32)(self0), &result)
	return
}

// UpdateProgress represents the imported method "update-progress".
//
// 更新上传进度[0,100]
//
//	update-progress: func(progress: f64)
//
//go:nosplit
func (self Readable) UpdateProgress(progress float64) {
	self0 := cm.Reinterpret[uint32](self)
	progress0 := (float64)(progress)
	wasmimport_ReadableUpdateProgress((uint32)(self0), (float64)(progress0))
	return
}

// FieldKind represents the variant "openlist:plugin-driver/types@0.1.0#field-kind".
//
// 定义 `form-field` 在 UI 中渲染的控件类型。
//
//	variant field-kind {
//		string-kind(string),
//		password-kind(string),
//		number-kind(f64),
//		boolean-kind(bool),
//		text-kind(string),
//		select-kind(list<string>),
//	}
type FieldKind cm.Variant[uint8, string, float64]

// FieldKindStringKind returns a [FieldKind] of case "string-kind".
func FieldKindStringKind(data string) FieldKind {
	return cm.New[FieldKind](0, data)
}

// StringKind returns a non-nil *[string] if [FieldKind] represents the variant case "string-kind".
func (self *FieldKind) StringKind() *string {
	return cm.Case[string](self, 0)
}

// FieldKindPasswordKind returns a [FieldKind] of case "password-kind".
func FieldKindPasswordKind(data string) FieldKind {
	return cm.New[FieldKind](1, data)
}

// PasswordKind returns a non-nil *[string] if [FieldKind] represents the variant case "password-kind".
func (self *FieldKind) PasswordKind() *string {
	return cm.Case[string](self, 1)
}

// FieldKindNumberKind returns a [FieldKind] of case "number-kind".
func FieldKindNumberKind(data float64) FieldKind {
	return cm.New[FieldKind](2, data)
}

// NumberKind returns a non-nil *[float64] if [FieldKind] represents the variant case "number-kind".
func (self *FieldKind) NumberKind() *float64 {
	return cm.Case[float64](self, 2)
}

// FieldKindBooleanKind returns a [FieldKind] of case "boolean-kind".
func FieldKindBooleanKind(data bool) FieldKind {
	return cm.New[FieldKind](3, data)
}

// BooleanKind returns a non-nil *[bool] if [FieldKind] represents the variant case "boolean-kind".
func (self *FieldKind) BooleanKind() *bool {
	return cm.Case[bool](self, 3)
}

// FieldKindTextKind returns a [FieldKind] of case "text-kind".
func FieldKindTextKind(data string) FieldKind {
	return cm.New[FieldKind](4, data)
}

// TextKind returns a non-nil *[string] if [FieldKind] represents the variant case "text-kind".
func (self *FieldKind) TextKind() *string {
	return cm.Case[string](self, 4)
}

// FieldKindSelectKind returns a [FieldKind] of case "select-kind".
func FieldKindSelectKind(data cm.List[string]) FieldKind {
	return cm.New[FieldKind](5, data)
}

// SelectKind returns a non-nil *[cm.List[string]] if [FieldKind] represents the variant case "select-kind".
func (self *FieldKind) SelectKind() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 5)
}

var _FieldKindStrings = [6]string{
	"string-kind",
	"password-kind",
	"number-kind",
	"boolean-kind",
	"text-kind",
	"select-kind",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v FieldKind) String() string {
	return _FieldKindStrings[v.Tag()]
}

// FormField represents the record "openlist:plugin-driver/types@0.1.0#form-field".
//
// 描述一个需要用户配置的字段。宿主使用它来动态构建设置界面。
//
//	record form-field {
//		name: string,
//		label: string,
//		kind: field-kind,
//		required: bool,
//		help: string,
//	}
type FormField struct {
	_ cm.HostLayout `json:"-"`
	// 字段的唯一标识符（键）。
	Name string `json:"name"`

	// 显示给用户的标签。
	Label string `json:"label"`

	// 字段的输入类型，用于 UI 渲染。
	Kind FieldKind `json:"kind"`

	// 是否必填
	Required bool `json:"required"`

	// 字段的帮助或提示信息。
	Help string `json:"help"`
}

// Capability represents the flags "openlist:plugin-driver/types@0.1.0#capability".
//
// 驱动支持的能力列表。
//
//	flags capability {
//		get-file,
//		list-file,
//		link-file,
//		mkdir-file,
//		rename-file,
//		move-file,
//		remove-file,
//		copy-file,
//		upload-file,
//	}
type Capability uint16

const (
	CapabilityGetFile Capability = 1 << iota
	CapabilityListFile
	CapabilityLinkFile
	CapabilityMkdirFile
	CapabilityRenameFile
	CapabilityMoveFile
	CapabilityRemoveFile
	CapabilityCopyFile
	CapabilityUploadFile
)

// DriverProps represents the record "openlist:plugin-driver/types@0.1.0#driver-props".
//
// 驱动的静态属性，镜像 Go 代码中的 `Config` 结构体。
//
//	record driver-props {
//		name: string,
//		only-proxy: bool,
//		no-cache: bool,
//		alert: string,
//		no-overwrite-upload: bool,
//		proxy-range: bool,
//		capabilitys: capability,
//	}
type DriverProps struct {
	_ cm.HostLayout `json:"-"`
	// 网盘名称
	Name string `json:"name"`

	// 只能通过代理下载(本地文件)
	OnlyProxy bool `json:"only-proxy"`

	// 不要缓存 object
	NoCache bool   `json:"no-cache"`
	Alert   string `json:"alert"`

	// 不支持覆盖上传
	NoOverwriteUpload bool `json:"no-overwrite-upload"`
	ProxyRange        bool `json:"proxy-range"`

	// 网盘能力标记
	Capabilitys Capability `json:"capabilitys"`
}

// RangeSpec represents the imported record "openlist:plugin-driver/types@0.1.0#range-spec".
//
// 定义文件的字节范围。
//
//	record range-spec {
//		offset: u64,
//		size: option<u64>,
//		%stream: borrow<output-stream>,
//	}
type RangeSpec struct {
	_      cm.HostLayout     `json:"-"`
	Offset uint64            `json:"offset"`
	Size   cm.Option[uint64] `json:"size"`
	Stream OutputStream      `json:"stream"`
}

// LinkArgs represents the imported record "openlist:plugin-driver/types@0.1.0#link-args".
//
//	record link-args {
//		ip: string,
//		headers: borrow<headers>,
//	}
type LinkArgs struct {
	_  cm.HostLayout `json:"-"`
	IP string        `json:"ip"`

	// 释放由host端控制
	Headers Headers `json:"headers"`
}

// LinkInfo represents the imported record "openlist:plugin-driver/types@0.1.0#link-info".
//
// 包含直链所需的信息。
//
//	record link-info {
//		url: string,
//		headers: headers,
//		expiration: option<duration>,
//	}
type LinkInfo struct {
	_          cm.HostLayout       `json:"-"`
	URL        string              `json:"url"`
	Headers    Headers             `json:"headers"`
	Expiration cm.Option[Duration] `json:"expiration"`
}

// LinkResource represents the imported variant "openlist:plugin-driver/types@0.1.0#link-resource".
//
// `link` 操作的返回结果，可以是直链或数据流。
//
//	variant link-resource {
//		direct(link-info),
//		range-reader,
//	}
type LinkResource cm.Variant[uint8, LinkInfo, LinkInfo]

// LinkResourceDirect returns a [LinkResource] of case "direct".
func LinkResourceDirect(data LinkInfo) LinkResource {
	return cm.New[LinkResource](0, data)
}

// Direct returns a non-nil *[LinkInfo] if [LinkResource] represents the variant case "direct".
func (self *LinkResource) Direct() *LinkInfo {
	return cm.Case[LinkInfo](self, 0)
}

// LinkResourceRangeReader returns a [LinkResource] of case "range-reader".
func LinkResourceRangeReader() LinkResource {
	var data struct{}
	return cm.New[LinkResource](1, data)
}

// RangeReader returns true if [LinkResource] represents the variant case "range-reader".
func (self *LinkResource) RangeReader() bool {
	return self.Tag() == 1
}

var _LinkResourceStrings = [2]string{
	"direct",
	"range-reader",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v LinkResource) String() string {
	return _LinkResourceStrings[v.Tag()]
}

// HashAlg represents the variant "openlist:plugin-driver/types@0.1.0#hash-alg".
//
// 定义支持的哈希算法类型。
//
//	variant hash-alg {
//		md5,
//		sha1,
//		sha256,
//		gcid,
//	}
type HashAlg uint8

const (
	HashAlgMd5 HashAlg = iota
	HashAlgSha1
	HashAlgSha256
	HashAlgGcid
)

var _HashAlgStrings = [4]string{
	"md5",
	"sha1",
	"sha256",
	"gcid",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e HashAlg) String() string {
	return _HashAlgStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e HashAlg) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *HashAlg) UnmarshalText(text []byte) error {
	return _HashAlgUnmarshalCase(e, text)
}

var _HashAlgUnmarshalCase = cm.CaseUnmarshaler[HashAlg](_HashAlgStrings[:])

// HashInfo represents the record "openlist:plugin-driver/types@0.1.0#hash-info".
//
// 包含哈希算法和其计算值的记录。
//
//	record hash-info {
//		alg: hash-alg,
//		val: string,
//	}
type HashInfo struct {
	_   cm.HostLayout `json:"-"`
	Alg HashAlg       `json:"alg"`
	Val string        `json:"val"`
}

// Object represents the record "openlist:plugin-driver/types@0.1.0#object".
//
// 代表文件或目录的丰富数据结构。
// 为了性能，此结构在宿主和插件之间按值传递。
//
//	record object {
//		path: string,
//		id: string,
//		name: string,
//		size: s64,
//		is-folder: bool,
//		created: duration,
//		modified: duration,
//		thumb: option<string>,
//		hashes: list<hash-info>,
//		extra: list<tuple<string, string>>,
//	}
type Object struct {
	_ cm.HostLayout `json:"-"`
	// 对象的绝对路径。
	Path string `json:"path"`

	// 对象的id信息
	ID string `json:"id"`

	// 对象的名称。
	Name string `json:"name"`

	// 对象的大小（字节）。
	Size int64 `json:"size"`

	// 是否为目录。
	IsFolder bool `json:"is-folder"`

	// 创建时间戳
	Created Duration `json:"created"`

	// 修改时间戳
	Modified Duration `json:"modified"`

	// 缩略图链接。
	Thumb cm.Option[string] `json:"thumb"`

	// 文件的哈希信息列表。
	Hashes cm.List[HashInfo] `json:"hashes"`

	// 用于存储驱动特定的、非标准的元数据。
	Extra cm.List[[2]string] `json:"extra"`
}

// UploadRequest represents the imported record "openlist:plugin-driver/types@0.1.0#upload-request".
//
// 封装上传操作的所有参数。
//
//	record upload-request {
//		object: object,
//		content: borrow<readable>,
//		target: option<object>,
//	}
type UploadRequest struct {
	_      cm.HostLayout `json:"-"`
	Object Object        `json:"object"`

	// 指向宿主端文件内容的句柄。
	// 由host控制释放
	Content Readable `json:"content"`

	// 如果是覆盖上传，宿主会提供被覆盖文件的原始对象数据。
	Target cm.Option[Object] `json:"target"`
}

// LinkResult represents the imported record "openlist:plugin-driver/types@0.1.0#link-result".
//
//	record link-result {
//		file: option<object>,
//		%resource: link-resource,
//	}
type LinkResult struct {
	_ cm.HostLayout `json:"-"`
	// 某些网盘需要在link时才能获取到正确的信息
	File     cm.Option[Object] `json:"file"`
	Resource LinkResource      `json:"resource"`
}

// Cancellable represents the imported resource "openlist:plugin-driver/types@0.1.0#cancellable".
//
// 代表可取消操作的上下文资源。
//
//	resource cancellable
type Cancellable cm.Resource

// ResourceDrop represents the imported resource-drop for resource "cancellable".
//
// Drops a resource handle.
//
//go:nosplit
func (self Cancellable) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_CancellableResourceDrop((uint32)(self0))
	return
}

// Subscribe represents the imported method "subscribe".
//
// 返回一个 pollable，当取消请求发生时，它将变为就绪状态。
//
//	subscribe: func() -> pollable
//
//go:nosplit
func (self Cancellable) Subscribe() (result Pollable) {
	self0 := cm.Reinterpret[uint32](self)
	result0 := wasmimport_CancellableSubscribe((uint32)(self0))
	result = cm.Reinterpret[Pollable]((uint32)(result0))
	return
}
