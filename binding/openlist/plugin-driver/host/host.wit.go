// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package host represents the imported interface "openlist:plugin-driver/host@0.1.0".
package host

import (
	"go.bytecodealliance.org/cm"
)

// LogLevel represents the enum "openlist:plugin-driver/host@0.1.0#log-level".
//
// 日志级别。
//
//	enum log-level {
//		debug,
//		info,
//		warn,
//		error
//	}
type LogLevel uint8

const (
	LogLevelDebug LogLevel = iota
	LogLevelInfo
	LogLevelWarn
	LogLevelError
)

var _LogLevelStrings = [4]string{
	"debug",
	"info",
	"warn",
	"error",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e LogLevel) String() string {
	return _LogLevelStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e LogLevel) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *LogLevel) UnmarshalText(text []byte) error {
	return _LogLevelUnmarshalCase(e, text)
}

var _LogLevelUnmarshalCase = cm.CaseUnmarshaler[LogLevel](_LogLevelStrings[:])

// Log represents the imported function "log".
//
// 导入由宿主（Host）实现的接口
// 由宿主处理的日志函数。
//
//	log: func(level: log-level, message: string)
//
//go:nosplit
func Log(level LogLevel, message string) {
	level0 := (uint32)(level)
	message0, message1 := cm.LowerString(message)
	wasmimport_Log((uint32)(level0), (*uint8)(message0), (uint32)(message1))
	return
}

// LoadConfig represents the imported function "load-config".
//
// 从宿主获取插件的配置。JSON 类型
//
//	load-config: func(driver: u32) -> result<list<u8>, string>
//
//go:nosplit
func LoadConfig(driver uint32) (result cm.Result[cm.List[uint8], cm.List[uint8], string]) {
	driver0 := (uint32)(driver)
	wasmimport_LoadConfig((uint32)(driver0), &result)
	return
}

// SaveConfig represents the imported function "save-config".
//
// 请求宿主保存插件的配置。JSON 类型
//
//	save-config: func(driver: u32, config: list<u8>) -> result<_, string>
//
//go:nosplit
func SaveConfig(driver uint32, config cm.List[uint8]) (result cm.Result[string, struct{}, string]) {
	driver0 := (uint32)(driver)
	config0, config1 := cm.LowerList(config)
	wasmimport_SaveConfig((uint32)(driver0), (*uint8)(config0), (uint32)(config1), &result)
	return
}
